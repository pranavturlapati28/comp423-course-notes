{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pranav's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ol> <li> <p>Prerequisites</p> <ol> <li>You need the following softwares: VSCode and Docker</li> <li>Install the Dev Containers extension on VSCode </li> </ol> </li> <li> <p>Setting up a Dev Container in VSCode</p> <ol> <li>Create a new project  <code>mkdir go-dev-container</code> and <code>cd go-dev-container</code> and  <code>git init</code></li> <li>Open VSCode and navigate to the <code>go-dev-container</code> directory</li> <li>Type <code>Cmd+Shift+P</code> on Mac and <code>Ctrl+Shift+P</code> on Windows type <code>Dev Containers: Add Development Container Configuration Files</code>.</li> <li>Press <code>Add configuration to workspace</code>. Search for Go. Press <code>Go, devcontainers</code> from from the list of container configurations and choose the version you want to run. Keep the default configurations.</li> <li> <p>Now you should have a default <code>.devcontainers/devcontainers.json</code> file</p> </li> <li> <p>Now you have set up the Go Container environment. To start the container, press <code>Cmd+Shift+P</code> on mac or <code>Ctrl+Shift+P</code> on windows. Click <code>Dev Containers: Rebuild and Reopen in Container</code>. This will take a while.</p> </li> <li>To customize your Dev Container, you can modify the <code>devcontainer.json</code> file as follows. The name of the container is in the <code>name</code> field. The <code>image</code> is the default Docker base environment. With the <code>customizations</code>, you can modify the settings or the extensions used in the environment. And finally there are further settings such as <code>postCreateCommand</code> which are commands that run after the container is built. Further documentation exists at Create a Dev Container.</li> <li>In the terminal, once the container is running you can type <code>go version</code></li> </ol> </li> </ol> <p>Step E Code</p> <pre><code>    {\n        \"name\": \"Go\",\n        \"image\": \"mcr.microsoft.com/devcontainers/go:1-1.23-bookworm\",\n        \"features\": {\n            \"ghcr.io/devcontainers/features/go:1\": {}\n        }\n    }\n</code></pre> <p>Step G Code</p> <pre><code>        {\n            \"name\": \"COMP423 Course Notes\",\n            \"image\": \"mcr.microsoft.com/devcontainers/python:latest\",\n            \"customizations\": {\n                \"vscode\": {\n                    \"settings\": {},\n                    \"extensions\": [\"ms-python.python\"]\n                }\n            },\n            \"postCreateCommand\": \"pip install -r requirements.txt\"\n        }\n</code></pre> <ol> <li>Now let us actually create in Go!<ol> <li>No type in the terminal <code>go mod init hello-dev-container</code></li> <li>This should create a file which should initialize Go in this directory.</li> <li>Create a new file named <code>main.go</code></li> <li>In this new file we will code our program as follows.</li> <li>In the terminal type go <code>go run main.go</code> and this should result in a \"Hello COMP423!\" outputted.</li> </ol> </li> </ol> <p>Step D Code</p> <pre><code>    package main\n    import \"fmt\"\n    func main() {\n        fmt.Println(\"Hello COMP423!\")\n    }\n</code></pre> <ul> <li> <p>Primary author: Pranav Turlapati</p> </li> <li> <p>Reviewer: Tianyi Zhou</p> </li> </ul>"}]}